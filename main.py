from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import datetime

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
last_data = {
    "temperature": None,
    "humidity": None,
    "motion": None,
    "water": None,
    "rssi": None,
    "snr": None,
    "time": None,
}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–ª–µ
relay_state = {"state": "off"}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤
@app.post("/api/sensor")
async def receive_sensor_data(data: dict):
    global last_data
    data["time"] = datetime.datetime.now().strftime("%H:%M:%S")
    last_data = data
    return {"message": "Data received"}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
@app.get("/api/data")
async def get_data():
    return last_data

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ª–µ
@app.get("/api/relay")
async def get_relay_state():
    return JSONResponse(content=relay_state)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–ª–µ
@app.post("/api/relay")
async def set_relay_state(request: Request):
    data = await request.json()
    state = data.get("state")
    if state in ["on", "off"]:
        relay_state["state"] = state
        return JSONResponse(content={"status": "success", "new_state": state})
    else:
        return JSONResponse(content={"status": "error", "message": "Invalid state"}, status_code=400)

# HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ
@app.get("/panel", response_class=HTMLResponse)
async def get_panel():
    html = f"""
    <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: sans-serif;
                    padding: 20px;
                    background: #f9f9f9;
                }}
                .card {{
                    background: white;
                    border-radius: 10px;
                    padding: 20px;
                    max-width: 400px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }}
                .item {{
                    margin: 10px 0;
                }}
                button {{
                    margin-right: 10px;
                    padding: 10px 20px;
                    font-size: 14px;
                }}
            </style>
        </head>
        <body>
            <div class="card">
                <h2>üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h2>
                <div class="item">üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {last_data["temperature"]} ¬∞C</div>
                <div class="item">üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {last_data["humidity"]} %</div>
                <div class="item">üö∂ –î–≤–∏–∂–µ–Ω–∏–µ: {"–î–∞" if last_data["motion"] else "–ù–µ—Ç"}</div>
                <div class="item">üåä –í–æ–¥–∞: {last_data["water"]}</div>
                <!-- –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ LoRa –ø–∞—Ä–∞–º–µ—Ç—Ä—ã -->
                <!-- <div class="item">üì∂ RSSI: {last_data["rssi"]}</div> -->
                <!-- <div class="item">üì° SNR: {last_data["snr"]}</div> -->
                <div class="item">‚è∞ –í—Ä–µ–º—è: {last_data["time"]}</div>

                <hr>

                <h3>üñ≤Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ</h3>
                <div class="item">–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {relay_state["state"]}</div>
                <button onclick="setRelay('on')">–í–∫–ª—é—á–∏—Ç—å —Ä–µ–ª–µ</button>
                <button onclick="setRelay('off')">–í—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–ª–µ</button>
                <p id="relayStatus"></p>
            </div>

            <script>
                async function setRelay(state) {{
                    try {{
                        const response = await fetch('/api/relay', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json'
                            }},
                            body: JSON.stringify({{state}})
                        }});
                        const result = await response.json();
                        document.getElementById('relayStatus').innerText = '–û—Ç–≤–µ—Ç: ' + JSON.stringify(result);
                    }} catch (error) {{
                        console.error('–û—à–∏–±–∫–∞:', error);
                    }}
                }}
            </script>
        </body>
    </html>
    """
    return HTMLResponse(content=html)
